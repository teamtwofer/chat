// Generated by CoffeeScript 1.7.1
(function() {
  var FindRoom, Model, Room, contentYield, hash, models, routeTo, router,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Model = (function() {
    function Model() {}

    Model.prototype.contructor = function(title, templateId) {
      this.title = title;
      this.template = document.querySelector(templateId);
      return this.template.createShadowRoot();
    };

    Model.prototype.path = function() {
      return "/";
    };

    Model.prototype.stateObj = function() {
      return {};
    };

    Model.prototype.render = function() {
      return false;
    };

    return Model;

  })();

  FindRoom = (function(_super) {
    __extends(FindRoom, _super);

    function FindRoom() {
      this.title = 'Find A Chatroom';
      this.template = document.querySelector('#new-room-form');
      this.template.createShadowRoot();
    }

    FindRoom.prototype.path = function() {
      return "#!/find-room";
    };

    FindRoom.prototype.checkRoom = function(roomName) {
      var xhr;
      xhr = new XMLHttpRequest();
      xhr.open("POST", "/rooms");
      xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
      xhr.send(JSON.stringify({
        "room": roomName
      }));
      return xhr.onloadend = function(data) {
        console.log("Checked the room and this is the result: " + (JSON.stringify(this)));
        return routeTo('room', JSON.parse(this.response).room.name);
      };
    };

    FindRoom.prototype.render = function() {
      var findButton, findForm, findRoomDOM;
      findRoomDOM = this.template.content.querySelector(".room-finder").cloneNode(true);
      console.log(findRoomDOM);
      findButton = findRoomDOM.querySelector(".room-search");
      findForm = findRoomDOM.querySelector(".find-room");
      findForm.addEventListener("submit", (function(_this) {
        return function(evt) {
          var room;
          evt.preventDefault();
          return room = _this.checkRoom(document.querySelector(".input-room-name").value);
        };
      })(this));
      return findRoomDOM;
    };

    return FindRoom;

  })(Model);

  Room = (function(_super) {
    __extends(Room, _super);

    function Room(type, roomName) {
      this.title = "Welcome to, " + roomName;
      this.template = document.querySelector('#room');
      this.template.createShadowRoot();
      this.name = roomName;
    }

    Room.prototype.path = function() {
      console.log("Path is: #!/rooms/" + this.name);
      return "#!/rooms/" + this.name;
    };

    Room.prototype.stateObj = function() {
      return {
        'room': {
          'name': this.name
        }
      };
    };

    Room.prototype.render = function() {
      var chatter, message, message_input, messages_holder, newRoomDom, new_message_template, socket;
      newRoomDom = this.template.content.querySelector(".chatroom");
      socket = io();
      chatter = newRoomDom.querySelector('.message-form');
      message_input = newRoomDom.querySelector('.message-input');
      message = newRoomDom.querySelector('.message-field');
      messages_holder = newRoomDom.querySelector('.messages-holder');
      new_message_template = document.querySelector('#new-message');
      new_message_template.createShadowRoot();
      socket.emit('join-room', this.name);
      chatter.addEventListener('submit', function(e) {
        message.value = message_input.innerHTML;
        if (!(message.value.length < 1)) {
          socket.emit('chat message', {
            'message': message.value,
            'chatroom': this.name
          });
          message.value = '';
          message_input.innerHTML = '';
        }
        e.preventDefault();
        return false;
      });
      socket.on('receive-chat', function(message_text) {
        var new_message;
        console.log("is this working?");
        new_message = new_message_template.content.querySelector(".message").cloneNode(true);
        console.log(message_text);
        new_message.querySelector(".message-body").textContent = message_text.message;
        return messages_holder.appendChild(new_message);
      });
      return newRoomDom;
    };

    return Room;

  })(Model);

  router = {
    'root': {
      'path': '',
      'matcher': /^\/?$/,
      'name': 'root'
    },
    'find-room': {
      'path': '/find-room',
      'matcher': /^#!\/find-room$/
    },
    'rooms': {
      'path': '/rooms',
      'matcher': /^\#!\/rooms\/?$/,
      'name': 'view rooms'
    },
    'room': {
      'path': '/rooms/:name',
      'matcher': /^\#!\/rooms?\/([\w\d]+)\/?$/,
      'name': 'view a room'
    }
  };

  models = {
    'root': FindRoom,
    'find-room': FindRoom,
    'room': Room
  };

  contentYield = document.querySelector(".yield");

  routeTo = function(where, match) {
    var TempModel, instance;
    console.log("You want to go to: " + where + ".");
    TempModel = models[where];
    if (TempModel != null) {
      console.log("The Match is: " + match);
      instance = new TempModel(where, match);
      contentYield.innerHTML = "";
      contentYield.appendChild(instance.render());
      console.log(instance.title);
      return history.pushState(instance.stateObj(), instance.title, instance.path());
    } else {
      return console.log('you havent programmed that yet dawg');
    }
  };

  hash = window.location.hash;

  Object.keys(router).forEach(function(key) {
    var matched, route;
    if (router.hasOwnProperty(key)) {
      route = router[key];
      console.log(route);
      matched = hash.match(route.matcher);
      if ((matched != null) && matched.length > 0) {
        console.log("We made it to a page! " + route.name);
        console.log("Match really is: " + matched);
        routeTo(key, matched);
        return true;
      }
    }
  });

  window.onpopstate = function(data) {
    console.log(history.state);
    console.log(data);
    return console.log('WHO WHAT WHERE!');
  };

}).call(this);
